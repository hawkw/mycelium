#!/usr/bin/env bash
#
# Runs `miri` tests
set -euo pipefail

bindir=$( cd "${BASH_SOURCE[0]%/*}" && pwd )
rootdir=$( cd "$bindir"/.. && pwd )


# shellcheck source=_util.sh
. "$bindir"/_util.sh

cd "$rootdir"

# assume `cargo nextest` is present
testcmd=(cargo miri nextest run)

# shellcheck source=_util.sh
. "$bindir"/_util.sh

if [[ "${MIRI_NO_NEXTEST:-}" ]]; then
    testcmd=(cargo miri test)
elif ! cargo --list | grep -q "nextest"; then
    err "missing cargo-nextest executable"
    if confirm "      install it?"; then
        cargo install cargo-nextest
    else
        echo "okay, using cargo test"
        testcmd=(cargo miri test)
    fi
fi

# configure flags

# additional miri flags
add_miriflags=(
    # enable stacked borrows and strict provenance checks.
    # Note: this also implies `-Zmiri-tag-raw-pointers`
    "-Zmiri-strict-provenance"

    # disable miri's host isolation, because running `proptest` tests in miri
    # requires randomness.
    "-Zmiri-disable-isolation"
)

# additional flags passed to rustc
add_rustflags=(
    # enable layout randomization to help catch incorrect layout-dependent casts
    # etc.
    "-Zrandomize-layout"
)

# show the user the env vars we're setting for miri
set -x

# set env vars
export PROPTEST_CASES="${PROPTEST_CASES:-10}"
export RUSTFLAGS="${add_rustflags[*]} ${RUSTFLAGS:-}"
export MIRIFLAGS="${add_miriflags[*]} ${MIRIFLAGS:-}"

# actually run miri
"${testcmd[@]}" --lib "${@}"