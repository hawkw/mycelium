#!/usr/bin/env bash
usage="Releases a mycelium crate.

USAGE:
    $(basename "$0") [FLAGS] <CRATE> <VERSION>

FLAGS:
    -h, --help      Show this help text and exit.
    -v, --verbose   Enable verbose output.
    -d, --dry-run   Do not change any files or commit a git tag."

set -euo pipefail

cd "$(dirname "$0")"/..

err() {
    echo -e "\e[31m\e[1merror:\e[0m" "$@" 1>&2;
}

note() {
    echo -e "\e[31m\e[1mnote:\e[0m" "$@" 1>&2;
}

status() {
    local width=12
    printf "\e[32m\e[1m%${width}s\e[0m %s\n" "$1" "$2"
}

confirm() {
    while read -r -p "$1 [Y/n] " input
    do
        case "$input" in
            [yY][eE][sS]|[yY])
                return 0
                ;;
            [nN][oO]|[nN])
                return 1
                ;;
            *)
                err "invalid input $input"
                ;;
        esac
    done
}

verify() {
    status "Verifying" "if $crate v$version can be released"

    if ! cargo --list | grep -q "hack"; then
        err "missing cargo-hack executable"
        if confirm "      install it?"; then
            cargo install cargo-hack
        else
            echo "okay, exiting"
            exit 1
        fi
    fi

    status "Checking" "if $crate builds across feature combinations"

    local cargo_hack=(cargo hack -p "$crate" --feature-powerset --no-dev-deps)

    if [[ "$verbose" ]]; then
        cargo_hack+=("$verbose" check)
    else
        cargo_hack+=(check --quiet)
    fi

    "${cargo_hack[@]}"
    local cargo_hack_status="$?"

    if [[ "$cargo_hack_status" != "0" ]] ; then
        err "$crate did not build with all feature combinations (cargo hack exited with $cargo_hack_status)!"
        exit 1
    fi


    if git tag -l | grep -Fxq "$tag" ; then
        err "git tag \`$tag\` already exists"
        exit 1
    fi
}

update_version() {
    # check the current version of the crate
    local curr_version
    curr_version=$(cargo pkgid -p "$crate" | sed -n 's/.*#\(.*\)/\1/p')
    if [[ "$curr_version" == "$version" ]]; then
        err "crate $crate is already at version $version!"
        if ! confirm "       are you sure you want to release $version?"; then
            echo "okay, exiting"
            exit 0
        fi
    else
        status "Updating" "$crate from $curr_version to $version"
        sed -i \
            "/\[package\]/,/\[.*dependencies\]/{s/^version = \"$curr_version\"/version = \"$version\"/}" \
            "$cargo_toml"
    fi
}

update_changelog() {
    if ! [[ -x "$(command -v git-cliff)" ]]; then
        err "missing git-cliff executable"
        if confirm "       install it?"; then
            cargo install git-cliff
        else
            echo "okay, exiting"
            exit 0
        fi
    fi

    status "Updating" "changelog for $crate $version"

    local git_cliff=(
        git-cliff
        --include-path "${path}/**"
        --output "$changelog"
        --config cliff.toml
        --tag "$tag"
    )

    if [[ "$verbose" ]]; then
        git_cliff+=("$verbose")
    fi

    "${git_cliff[@]}"
}

publish() {
    status "Publishing" "$crate v$version"
    cd "$path"
    local cargo_package=(cargo package)
    local cargo_publish=(cargo publish)

    if [[ "$verbose" ]]; then
        cargo_package+=("$verbose")
        cargo_publish+=("$verbose")
    fi

    if [[ "$dry_run" ]]; then
        cargo_publish+=("$dry_run")
    fi

    "${cargo_package[@]}"
    "${cargo_publish[@]}"

    status "Tagging" "$tag"
    local git_tag=(git tag "$tag" "&&" git push --tags)
    if [[ "$dry_run" ]]; then
        echo "# " "${git_tag[@]}"
    else
        "${git_tag[@]}"
    fi
}

verbose=''
dry_run=''

for arg in "$@"
do
    case "$arg" in
    -h|--help)
        echo "$usage"
        exit 0
        ;;
    -v|--verbose)
        verbose="--verbose"
        ;;
    -d|--dry-run)
        dry_run="--dry-run"
        ;;
    -*)
        err "unknown flag $arg"
        echo "$usage"
        exit 1
        ;;
    *) # crate or version
        if [[ -z "${crate+crate}" ]]; then
            crate="$arg"
        elif [[ -z "${version+version}" ]]; then
            version="$arg"
        else
            err "unknown positional argument \"$arg\""
            echo "$usage"
            exit 1
        fi
        ;;
    esac
done

if [[ "$verbose" ]]; then
    set -x
fi

if [[ -z "${version+version}" ]]; then
    err "no version specified!"
    errexit=1
fi

if [[ "${crate+crate}" ]]; then
    tag="$crate-v$version"
else
    err "no crate specified!"
    errexit=1
fi

if [[ "${errexit+errexit}" ]]; then
    echo "$usage"
    exit 1
fi

mycoprefix='mycelium-';
if [[ -d $crate ]]; then
    path="$crate"
elif [[ -d "${crate#"$mycoprefix"}" ]]; then
    path="${crate#"$mycoprefix"}"
else
    err "unknown crate $crate"
    echo "$usage"
    exit 1
fi

cargo_toml="${path}/Cargo.toml"
changelog="${path}/CHANGELOG.md"

files=("$cargo_toml" "$changelog")

is_uncommitted=''
for file in "${files[@]}"; do
    if ! git diff-index --quiet HEAD -- "$file"; then
        err "would overwrite uncommitted changes to $file!"
        is_uncommitted=1
    fi
done

if [[ "$is_uncommitted" ]]; then
    exit 1
fi

verify
update_version
update_changelog

staged="$(git diff-index --cached --name-only HEAD --)"
if [[ "$staged" ]]; then
    err "skipping commit, as it would include the following unrelated staged files:"
    echo "$staged"
    exit 1
fi

status "Ready" "to prepare release commit!"
echo ""

git add "${files[@]}"
git diff --staged

if [[ "$dry_run" ]]; then
    git reset HEAD -- "${files[@]}"
    git checkout HEAD -- "${files[@]}"
fi

echo ""

if confirm "commit and push?"; then
    git_commit=(git commit -sS -m "chore($crate): prepare to release $crate $version")
    git_push=(git push -u origin)

    if [[ "$dry_run" ]]; then

        echo ""
        echo "# " "${git_commit[@]}"
        echo "# " "${git_push[@]}"
    else
        "${git_commit[@]}"
        "${git_push[@]}"
    fi
else
    echo "okay, exiting"
fi

if confirm "publish the crate?"; then

    echo ""
    publish
else
    echo "okay, exiting"
fi