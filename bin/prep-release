#!/usr/bin/env bash
usage="Releases a mycelium crate.

USAGE:
    $(basename "$0") [FLAGS] <CRATE> <VERSION>

FLAGS:
    -h, --help      Show this help text and exit.
    -v, --verbose   Enable verbose output.
    -d, --dry-run   Do not change any files or commit a git tag."

set -euo pipefail

cd "$(dirname "$0")"/..

err() {
    echo -e "\e[31m\e[1merror:\e[0m" "$@" 1>&2;
}

note() {
    echo -e "\e[31m\e[1mnote:\e[0m" "$@" 1>&2;
}

status() {
    local width=12
    printf "\e[32m\e[1m%${width}s\e[0m %s\n" "$1" "$2"
}

confirm() {
    while read -r -p "$1 [Y/n] " input
    do
        case "$input" in
            [yY][eE][sS]|[yY])
                return 0
                ;;
            [nN][oO]|[nN])
                return 1
                ;;
            *)
                err "invalid input $input"
                ;;
        esac
    done
}

verbose=''
dry_run=''

for arg in "$@"
do
    case "$arg" in
    -h|--help)
        echo "$usage"
        exit 0
        ;;
    -v|--verbose)
        verbose=1
        ;;
    -d|--dry-run)
        dry_run=1
        ;;
    -*)
        err "unknown flag $arg"
        echo "$usage"
        exit 1
        ;;
    *) # crate or version
        if [[ -z "${crate+crate}" ]]; then
            crate="$arg"
        elif [[ -z "${version+version}" ]]; then
            version="$arg"
        else
            err "unknown positional argument \"$arg\""
            echo "$usage"
            exit 1
        fi
        ;;
    esac
done

if [[ "$verbose" ]]; then
    set -x
fi

if [[ -z "${version+version}" ]]; then
    err "no version specified!"
    errexit=1
fi

if [[ "${crate+crate}" ]]; then
    tag="$crate-v$version"
else
    err "no crate specified!"
    errexit=1
fi

if [[ "${errexit+errexit}" ]]; then
    echo "$usage"
    exit 1
fi

mycoprefix='mycelium-';
if [[ -d $crate ]]; then
    path="$crate"
elif [[ -d "${crate#"$mycoprefix"}" ]]; then
    path="${crate#"$mycoprefix"}"
else
    err "unknown crate $crate"
    echo "$usage"
    exit 1
fi

if ! [[ -x "$(command -v git-cliff)" ]]; then
    err "missing git-cliff executable"
    if confirm "       install it?"; then
        cargo install git-cliff
    else
        echo "okay, exiting"
        exit 0
    fi
fi

cargo_toml="${path}/Cargo.toml"
changelog="${path}/CHANGELOG.md"

files=("$cargo_toml" "$changelog")

is_uncommitted=''
for file in "${files[@]}"; do
    if ! git diff-index --quiet HEAD -- "$file"; then
        err "would overwrite uncommitted changes to $file!"
        is_uncommitted=1
    fi
done

if [[ "$is_uncommitted" ]]; then
    exit 1
fi

curr_version=$(cargo pkgid -p "$crate" | sed -n 's/.*#\(.*\)/\1/p')

status "Updating" "$crate from $curr_version to $version"
sed -i \
    "/\[package\]/,/\[.*dependencies\]/{s/^version = \"$curr_version\"/version = \"$version\"/}" \
    "$cargo_toml"

status "Updating" "changelog for $crate $version"

git-cliff \
    --include-path "${path}/**" \
    -o "$changelog" \
     --config cliff.toml \
     --tag "$tag"

staged="$(git diff-index --cached HEAD -- | rev | cut -d' ' -f 1 | rev)"
if [[ "$staged" ]]; then
    err "skipping commit, as it would include the following unrelated staged files:"
    echo "$staged"
    exit 1
fi

status "Ready" "to prepare release commit!"
echo ""

git add "${files[@]}"
git diff --staged

echo ""

if confirm "commit and push?"; then
    git commit -sS -m "chore($crate): prepare to release $crate $version"
    git push -u origin
else
    echo "okay, exiting"
fi