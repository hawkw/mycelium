# advisory CI jobs that are allowed to fail.
#
# these are intended as warnings about things that should be addressed in the
# future, but aren't hard PR blockers.
name: CI (warnings)

on: [pull_request, workflow_dispatch]

env:
  # disable incremental compilation.
  #
  # incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. however,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # see https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). this should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  is_enabled:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths: '["**.rs", "**/Cargo.toml", "Cargo.lock", ".github/workflows/ci_warnings.yml"]'
          do_not_skip: '["workflow_dispatch"]'

  # are there any annoying clippy lints we ought to clean up (host build)?
  clippy-host:
    name: cargo clippy (host)
    needs: is_enabled
    if: ${{ needs.is_enabled.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run clippy
      uses: actions-rs/clippy-check@v1.0.5
      with:
        name: clippy-host
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features

  # are there any annoying clippy lints we ought to clean up (x86-64 cross
  # build)?
  clippy-x64:
    name: cargo clippy (cross x64)
    needs: is_enabled
    if: ${{ needs.is_enabled.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run cargo clippy
      uses: actions-rs/clippy-check@v1.0.5
      with:
        name: clippy-x64
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -Z build-std=core,alloc --target=x86_64-mycelium.json --all-features