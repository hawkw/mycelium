name: CI

on: [push]

env:
  # disable incremental compilation.
  #
  # incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. however,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # see https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). this should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  # run `cargo check` with the host target triple.
  check-host:
    name: cargo check (host)
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run cargo check
      uses: actions-rs/cargo@v1.0.1
      with:
        command: check
        args: --all --all-features

  # check code style with `rustfmt`
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run rustfmt
      uses: actions-rs/cargo@v1.0.1
      with:
        command: fmt
        args: --all -- --check

  # run host tests
  #
  # many crates in mycelium have tests that run on the host platform and are
  # compiled with the host's target triple. this allows the tests to use the
  # Rust standard library, enabling the use of testing libraries like `proptest`
  # and `loom`.
  #
  # it's also faster to run these tests without building a kernel image and
  # spinning up a QEMU VM, so host tests are preferred for tests that doesn't
  # *need* to be tested in a mycelium VM.
  test-host:
    runs-on: ubuntu-latest
    name: cargo test (host)
    needs: check-host
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run host tests
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test
        args: --all --all-features

  # build a bootable image for the `x86_64-mycelium` target.
  build-x64:
    name: build boot image (x86_64)
    runs-on: ubuntu-latest
    needs: check-host
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: x86_64 boot image
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build-x64


  # run kernel tests in QEMU for the `x86_64-mycelium` target.
  test-x64:
    name: cargo test (cross x64)
    runs-on: ubuntu-latest
    needs: check-host
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    # try to restore the installed QEMU version from cache...
    - name: cache qemu
      uses: actions/cache@v2
      id: cache-qemu
      with:
          path: ""~/qemu""
          key: ${{secrets.QEMU_VERSION}}
    # if we don't have a QEMU installation cached, install QEMU
    - name: install qemu
      env:
        CACHE_HIT: ${{steps.cache-qemu.outputs.cache-hit}}
        QEMU_VERSION: ${{secrets.QEMU_VERSION}}
        QEMU_DIR: "~/qemu"
      run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive "$QEMU_DIR"/* /
          else
            sudo apt-get update
            sudo apt-get install --yes qemu-system-x64="$QEMU_VERSION"
            mkdir -p "$QEMU_DIR"
            sudo dpkg -L qemu-system-x64 | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory "$QEMU_DIR"/
          fi
    - name: run tests
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test-x64

