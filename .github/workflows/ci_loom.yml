# CI workflow for running `loom` tests
#
# This is factored out from the main workflow so that it can be triggered only
# by changes to `mycelium-util`, which is the only crate that currently contains
# loom tests.
#
# Note that if other crates add loom tests in the future, they will need to be
# added to this workflow!
name: CI (loom)

on:
  push:
    paths:
      # Only the `mycelium-util` crate currently contains Loom tests
      - 'util/**'

env:
  # disable incremental compilation.
  #
  # incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. however,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # see https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). this should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  LOOM_MAX_PREEMPTIONS: 2
  LOOM_LOG: loom=trace
  RUSTFLAGS: "--cfg loom"

jobs:
  # run loom tests
  tests:
    runs-on: ubuntu-latest
    name: cargo test (loom)
    steps:
    - name: install rust toolchain
      run: rustup show
    - uses: actions/checkout@v2
    - name: run loom tests
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test
        # Currently, only the mycelium-util crate contains Loom tests.
        args: --profile loom --lib -p mycelium-util